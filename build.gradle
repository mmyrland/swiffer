
buildscript {
    ext {
        springBootVersion = '1.3.7.RELEASE'
    }
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:0.5.6.RELEASE")
        classpath('org.asciidoctor:asciidoctor-gradle-plugin:1.5.3')
    }
}

apply from: 'common.gradle'
apply from: 'sourcesets.gradle'

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'groovy'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.asciidoctor.convert'


ext { buildTime = new Date().format("yyyyMMddHHmm") }

springBoot {
    mainClass = 'mmyrland.Application'
}

repositories {
    jcenter()
}

bootRun {
    systemProperties = System.properties
    main = 'mmyrland.Application'
}

configurations {
    testCompile.extendsFrom compile

    integrationCompile.extendsFrom testCompile
    integrationRuntime.extendsFrom testRuntime

    compile.exclude group: 'commons-logging'
}

dependencies {
//    compile("org.codehaus.groovy:groovy-all:2.4.4")
//    compile("net.sourceforge.jtds:jtds:1.3.1")
    compile("org.springframework:spring-context-support")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-configuration-processor")
    compile("org.apache.commons:commons-lang3:3.4")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-joda:2.6.2")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jdk8")

    // persistence
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.jadira.usertype:usertype.core:5.0.0.GA")
    compile("org.postgresql:postgresql:${postgresqlVersion}")
    compile("org.flywaydb:flyway-core")

    compile('org.apache.commons:commons-math3:3.6.1')

    testCompile(
            'org.hamcrest:hamcrest-library:1.3',
            'junit:junit:4.12',
            'org.codehaus.groovy:groovy-all:2.4.4',
            'cglib:cglib:3.2.0',
            'org.spockframework:spock-spring:1.0-groovy-2.4',
            'org.springframework.restdocs:spring-restdocs-mockmvc',
            'org.springframework:spring-test',
            'com.jayway.jsonpath:json-path:2.2.0'
    )
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

task integrationTest(type: Test) {
    description = "Runs integration tests"
    group = "verification"
    systemProperty "spring.profiles.active", "integrationtest"
    testClassesDir = sourceSets.integration.output.classesDir
    classpath += sourceSets.test.runtimeClasspath + sourceSets.integration.runtimeClasspath

    testLogging {
        events "passed", "skipped", "failed"
        showStackTraces true
    }
}

processResources {
    logger.lifecycle( "project.properties about to be expanded" )
    logger.lifecycle( "----" )
    def map = project.properties.sort { it.key }

    if(logger.isEnabled(LogLevel.DEBUG)) {
        map.each { k, v -> logger.debug("${k}:${v}") }
    }

    filesMatching('**/application-actuatorsupport.properties') {
        expand project.properties
    }
}

// Always generate a source jar
task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    baseName = project.name
    classifier = 'sources'
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    dependsOn integrationTest
}

jar {
    baseName = project.name
    version = '0.1.0'
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

task('copyRESTDocs', type: Copy) {
    from(file("${asciidoctor.outputDir}/html5"))
    into("${buildDir}/classes/main/static/docs")
}

// Add the sourceJars to non-extractor modules
artifacts {
    archives sourceJar
}

check.dependsOn -= integrationTest
integrationTest.mustRunAfter test